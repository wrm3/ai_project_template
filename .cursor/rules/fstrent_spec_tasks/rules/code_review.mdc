---
description: Comprehensive code review guidelines for security, quality, performance, and maintainability
globs:
alwaysApply: false
---

# Code Review Guidelines

Perform thorough code reviews following these standardized procedures.

## Review Types

**Quick Review** (< 100 lines):
- Security scan
- Style check
- Basic quality

**Standard Review** (100-500 lines):
- Full security scan
- Quality analysis
- Performance check

**Comprehensive Review** (> 500 lines):
- In-depth security
- Architecture review
- Performance profiling

## Security Checklist (CRITICAL - Always First)

### SQL Injection
```python
# ‚ùå VULNERABLE
query = f"SELECT * FROM users WHERE id={user_id}"

# ‚úÖ SAFE
query = "SELECT * FROM users WHERE id=%s"
cursor.execute(query, (user_id,))
```

### XSS (Cross-Site Scripting)
```javascript
// ‚ùå VULNERABLE
div.innerHTML = user_input;

// ‚úÖ SAFE
div.textContent = user_input;
```

### Authentication/Authorization
```python
# ‚ùå MISSING AUTH
@app.route('/admin/users')
def admin_users():
    return render_template('users.html')

# ‚úÖ PROPER AUTH
@app.route('/admin/users')
@require_admin
def admin_users():
    if not current_user.is_admin:
        abort(403)
    return render_template('users.html')
```

### Secrets Exposure
```python
# ‚ùå HARDCODED
API_KEY = "sk-1234567890"

# ‚úÖ FROM ENVIRONMENT
API_KEY = os.getenv('API_KEY')
```

## Code Quality Standards

### File Size
- < 200 lines: ‚úÖ Good
- 200-500 lines: ‚ö†Ô∏è Consider refactoring
- 500-800 lines: ‚ö†Ô∏è Should refactor
- > 800 lines: ‚ùå Must refactor

### Function Size
- < 20 lines: ‚úÖ Good
- 20-50 lines: ‚ö†Ô∏è Acceptable
- 50-100 lines: ‚ö†Ô∏è Consider breaking up
- > 100 lines: ‚ùå Too complex

### Naming Conventions

**Python:**
```python
# ‚úÖ GOOD
user_count = 10
USER_API_KEY = "..."
class UserManager:
    def get_user_by_id(self, user_id):
        pass
```

**JavaScript/TypeScript:**
```javascript
// ‚úÖ GOOD
const userCount = 10;
const USER_API_KEY = "...";
class UserManager {
    getUserById(userId) {}
}
```

## Performance Checks

### N+1 Query Problem
```python
# ‚ùå BAD (N+1 queries)
users = User.query.all()
for user in users:
    print(user.profile.bio)

# ‚úÖ GOOD (2 queries total)
users = User.query.options(joinedload(User.profile)).all()
for user in users:
    print(user.profile.bio)
```

### Missing Indexes
```python
# Check if frequently queried fields are indexed
class User(db.Model):
    email = db.Column(db.String, index=True)  # ‚úÖ
```

## Review Output Format

```markdown
# Code Review: [Feature Name]

## Summary
**Recommendation:** [Approve / Request Changes / Comment]

## Security Issues
### CRITICAL
- [Issue with fix]

### HIGH
- [Issue with fix]

## Quality Issues
- [File size warnings]
- [Complexity warnings]

## Performance Concerns
- [With recommendations]

## Action Items
1. [ ] Fix CRITICAL issue X
2. [ ] Refactor large file Y
3. [ ] Add tests for Z
```

## Integration with fstrent-spec-tasks

Create tasks for:
- üî¥ CRITICAL/HIGH security issues ‚Üí Immediate task
- ‚ö†Ô∏è Files > 800 lines ‚Üí Refactoring task
- üìù Missing tests ‚Üí Improvement task

---

**For full details, see `.claude/skills/fstrent-code-reviewer/rules.md`**
